  public static class IntExtensions
    {
        /// <summary>
        /// Returns the digital root
        /// </summary>
        /// <param name="t">Int to examine</param>
        /// <returns>Digital root</returns>
        public static int DigitalRoot(this int t)
        {
            int val = t;
            do
            {
                val = IntToList(t).Aggregate((sum, i) => sum + i);
            } while (val > 9);

            return val;
        }

        /// <summary>
        /// Produce a list of the number's component digits
        /// </summary>
        /// <param name="t">Integer to convert</param>
        /// <returns>Generic list containing the number's component digits</returns>
        private static IEnumerable<int> IntToList(this int t)
        {
            return t.ToString().Select(digit => int.Parse(digit.ToString()));
        }

        /// <summary>
        /// Rearrange the integer to form a new int of the same length
        /// but smallest possible minimum value
        /// </summary>
        /// <param name="t">Int to rearrange</param>
        /// <returns>Min rearrangement</returns>
        public static int MinPermutation(this int t)
        {
            List<int> l = IntToList(t).ToList();
           
            l.Sort((a, b) => a.CompareTo(b));

            //above sort will push any 0s to the start of the list
            //and we want the number to begin with the smallest number
            //greater than 0
            if (l.First() == 0)
                l.Reverse   (
                                0
                                , l.TakeWhile(i => i == 0).Select((val, ind) => ind).Last() + 2
                            );

            

            //add the list componentns together to form one number
            l.Reverse();
            return (int)l.Select((val, ind) => Math.Pow(10, ind) * val).Sum();   
        }

        /// <summary>
        /// Get the maximum value formed from permuting the individual digits
        /// </summary>
        /// <param name="t">Value to permute</param>
        /// <returns>Max value</returns>
        /// <remarks>Doesn't check if the number produced has overflowed, e.g. rearranging the upper limit of an int32 (2147483647) will produce an overflow</remarks>
        public static int MaxPermutation(this int t)
        {
            List<int> l = IntToList(t).ToList();

            //order descending, largest first
            l.Sort((a, b) => b.CompareTo(a));

            l.Reverse();
            return (int)l.Select((val, ind) => Math.Pow(10, ind) * val).Sum();  
        }
    } 
